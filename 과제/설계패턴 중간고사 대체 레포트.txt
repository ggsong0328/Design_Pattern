설계패턴 중간고사 대체 레포트

여러가지 기능을 가진 주제 -> 예를 들어 카페

뭐가 좋을까...?
웹 페이지 구분...? -> 웹페이지를 보면 어떤 웹페이지인지, 세부적으로 어떤 내용을 가지고 있는지? 

그니까 기본적인 웹페이지가 있잖아. (뭐 가장 기본적인 웹페이지가 가지고 있는 뼈대 -> 제목, 내용 정도?)

이제 세부 주제들을 가진 웹페이지들 (크게 PC웹, 반응형 웹, 모바일 웹)

이 중에서도 더욱이 세부적으로 가는거지 오케이?

이걸 디자인 패턴 (Factory, Builder, Singleton, Prototype, Adapter, Proxy, Decorator, Facade, Bridge, Flyweight) 중에서 3개 이상을 결합하여 코드를 짜야해


팩토리 패턴(Factory Pattern): 이 패턴은 객체 생성에 관한 처리를 캡슐화합니다. 즉, 클라이언트가 직접 객체를 생성하는 대신, 객체 생성을 전담하는 별도의 클래스(이 경우 WebPageFactory)를 통해 객체를 요청하게 합니다. 이렇게 함으로써 클라이언트 측 코드는 생성하려는 객체의 구체적인 클래스에 대해 알 필요가 없게 됩니다. 이는 새로운 웹 페이지 타입이 추가되거나 웹 페이지 생성 로직이 변경될 때, 클라이언트 코드를 변경하지 않고도 대응할 수 있게 해줍니다. 따라서 코드의 확장성과 유지보수성이 향상됩니다.

데코레이터 패턴(Decorator Pattern): 객체에 추가 책임을 동적으로 부여할 수 있습니다. 기존 코드를 변경하지 않고도 객체의 기능을 확장하거나 수정할 수 있습니다. 이 코드에서 DecoratorWebPage는 WebPage 객체를 데코레이션하여 추가적인 기능(예: 추가 스타일이나 정보)을 제공합니다. 이를 통해 유연하게 객체의 행동을 확장할 수 있으며, 런타임에 원하는 대로 객체를 조합할 수 있게 해줍니다.

프록시 패턴(Proxy Pattern): 하나의 객체가 다른 객체의 대리인 또는 중간자 역할을 수행합니다. 대리인 객체는 원본 객체에 액세스하기 전 또는 후에 추가적인 작업(예: 접근 제어, 로깅, 지연 초기화 등)을 수행할 수 있으며, 이는 자원이 많이 소모되는 작업을 지연시키거나, 보안상의 이유로 직접적인 액세스를 제한할 필요가 있을 때 유용합니다. 코드에서 ProxyWebPage는 웹 페이지 액세스 전에 추가 로직(예: 액세스 권한 확인)을 수행할 수 있습니다.

각각의 패턴은 소프트웨어 디자인의 다양한 측면을 개선하기 위해 도입되며, 이러한 패턴들을 적절히 혼합해 사용함으로써 소프트웨어의 유연성, 확장성, 그리고 유지보수성을 증대시킬 수 있습니다.

보내주신 코드는 웹 페이지의 분류 및 관리를 위한 소프트웨어를 구현하기 위한 것입니다. 이 코드는 다양한 타입의 웹 페이지(PC, 반응형, 모바일)를 관리하고, 데코레이터 패턴과 프록시 패턴을 사용하여 웹 페이지에 추가 기능이나 스타일을 동적으로 적용하는 기능을 제공합니다.